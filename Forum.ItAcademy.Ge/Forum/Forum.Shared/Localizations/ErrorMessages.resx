<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllPasswordsRequired" xml:space="preserve">
    <value>All password fields should be filled in order to update the password.</value>
  </data>
  <data name="CommentBodyRequired" xml:space="preserve">
    <value>Comment body is a required field.</value>
  </data>
  <data name="CommentNotFound" xml:space="preserve">
    <value>Comment not found.</value>
  </data>
  <data name="ConfirmPasswordRequired" xml:space="preserve">
    <value>Confirm password is a required field.</value>
  </data>
  <data name="DescriptionRequired" xml:space="preserve">
    <value>Description is a required field.</value>
  </data>
  <data name="EmailAlreadyExists" xml:space="preserve">
    <value>User with this email already exists in the database.</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email is a required field.</value>
  </data>
  <data name="EmptyBio" xml:space="preserve">
    <value>Bio should not be empty in order to be updated.</value>
  </data>
  <data name="ImageNotFound" xml:space="preserve">
    <value>Image not found.</value>
  </data>
  <data name="InactiveTopic" xml:space="preserve">
    <value>New comments are not allowed on inactive topics.</value>
  </data>
  <data name="InvalidEmailFormat" xml:space="preserve">
    <value>Invalid email format, please try again.</value>
  </data>
  <data name="InvalidFileExtension" xml:space="preserve">
    <value>This file is not supported. Valid files: ".jpg", ".png", ".jpeg", ".webp", ".ico".</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid password, please try again.</value>
  </data>
  <data name="InvalidPasswordFormat" xml:space="preserve">
    <value>Password must be at least 6 characters long, must contain at least one digit, one symbol and uppercase letter.</value>
  </data>
  <data name="InvalidState" xml:space="preserve">
    <value>Such state doesn't exist.</value>
  </data>
  <data name="InvalidStatus" xml:space="preserve">
    <value>Such status doesn't exist.</value>
  </data>
  <data name="NotEnoughComments" xml:space="preserve">
    <value>The user should have at least 3 comments written, in order to create a new topic.</value>
  </data>
  <data name="OneFieldRequired" xml:space="preserve">
    <value>At least one field is required.</value>
  </data>
  <data name="PageNotFound" xml:space="preserve">
    <value>Page not found.</value>
  </data>
  <data name="PasswordMaxLength" xml:space="preserve">
    <value>Password must be less than 30 characters.</value>
  </data>
  <data name="PasswordMinLength" xml:space="preserve">
    <value>Password must be more than 6 characters.</value>
  </data>
  <data name="PasswordRequired" xml:space="preserve">
    <value>Password is a required field.</value>
  </data>
  <data name="PasswordsDoNotMatch" xml:space="preserve">
    <value>Passwords do not match, please try again.</value>
  </data>
  <data name="TitleMaxLength" xml:space="preserve">
    <value>Title must be less than 50 characters.</value>
  </data>
  <data name="TitleRequired" xml:space="preserve">
    <value>Title is a required field.</value>
  </data>
  <data name="TopicIdRequired" xml:space="preserve">
    <value>Topic Id is a required field.</value>
  </data>
  <data name="TopicNotFound" xml:space="preserve">
    <value>Topic not found.</value>
  </data>
  <data name="Unauthorized" xml:space="preserve">
    <value>The user is unauthorized for this service.</value>
  </data>
  <data name="UnhandledErrorOccurred" xml:space="preserve">
    <value>Unhandled error occurred, please try again later.</value>
  </data>
  <data name="UsernameAlreadyExists" xml:space="preserve">
    <value>Username already exists in the database.</value>
  </data>
  <data name="UsernameMaxLength" xml:space="preserve">
    <value>Username must be less than 50 characters.</value>
  </data>
  <data name="UsernameRequired" xml:space="preserve">
    <value>Username is a required field.</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found.</value>
  </data>
</root>